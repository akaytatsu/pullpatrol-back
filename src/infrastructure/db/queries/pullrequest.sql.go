// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: pullrequest.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const checkPullRequestExists = `-- name: CheckPullRequestExists :one
select count(*) from pullrequest where number = $1 and repository_id = $2
`

type CheckPullRequestExistsParams struct {
	Number       int64 `json:"number"`
	RepositoryID int64 `json:"repository_id"`
}

func (q *Queries) CheckPullRequestExists(ctx context.Context, arg CheckPullRequestExistsParams) (int64, error) {
	row := q.queryRow(ctx, q.checkPullRequestExistsStmt, checkPullRequestExists, arg.Number, arg.RepositoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPullRequest = `-- name: CreatePullRequest :exec
insert into pullrequest (number, action, repository_id, status, url, title, created_at, updated_at, closed_at, additions, deletions, changed_files, commits)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
`

type CreatePullRequestParams struct {
	Number       int64        `json:"number"`
	Action       string       `json:"action"`
	RepositoryID int64        `json:"repository_id"`
	Status       string       `json:"status"`
	Url          string       `json:"url"`
	Title        string       `json:"title"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
	ClosedAt     sql.NullTime `json:"closed_at"`
	Additions    int32        `json:"additions"`
	Deletions    int32        `json:"deletions"`
	ChangedFiles int32        `json:"changed_files"`
	Commits      int32        `json:"commits"`
}

func (q *Queries) CreatePullRequest(ctx context.Context, arg CreatePullRequestParams) error {
	_, err := q.exec(ctx, q.createPullRequestStmt, createPullRequest,
		arg.Number,
		arg.Action,
		arg.RepositoryID,
		arg.Status,
		arg.Url,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ClosedAt,
		arg.Additions,
		arg.Deletions,
		arg.ChangedFiles,
		arg.Commits,
	)
	return err
}

const createPullRequestRole = `-- name: CreatePullRequestRole :one
insert into pullrequest_role (repository_id, role_type, description, created_at, updated_at)
values ($1, $2, $3, $4, $5) returning id, repository_id, role_type, description, created_at, updated_at
`

type CreatePullRequestRoleParams struct {
	RepositoryID int64     `json:"repository_id"`
	RoleType     string    `json:"role_type"`
	Description  string    `json:"description"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreatePullRequestRole(ctx context.Context, arg CreatePullRequestRoleParams) (PullrequestRole, error) {
	row := q.queryRow(ctx, q.createPullRequestRoleStmt, createPullRequestRole,
		arg.RepositoryID,
		arg.RoleType,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PullrequestRole
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.RoleType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePullRequestRole = `-- name: DeletePullRequestRole :exec
delete from pullrequest_role where id = $1
`

func (q *Queries) DeletePullRequestRole(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deletePullRequestRoleStmt, deletePullRequestRole, id)
	return err
}

const getPullRequest = `-- name: GetPullRequest :one
select id, number, action, repository_id, status, url, title, closed_at, additions, deletions, changed_files, commits, created_at, updated_at from pullrequest where id = $1
`

func (q *Queries) GetPullRequest(ctx context.Context, id int64) (Pullrequest, error) {
	row := q.queryRow(ctx, q.getPullRequestStmt, getPullRequest, id)
	var i Pullrequest
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Action,
		&i.RepositoryID,
		&i.Status,
		&i.Url,
		&i.Title,
		&i.ClosedAt,
		&i.Additions,
		&i.Deletions,
		&i.ChangedFiles,
		&i.Commits,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPullRequestRole = `-- name: GetPullRequestRole :one
select id, repository_id, role_type, description, created_at, updated_at from pullrequest_role where id = $1
`

func (q *Queries) GetPullRequestRole(ctx context.Context, id int64) (PullrequestRole, error) {
	row := q.queryRow(ctx, q.getPullRequestRoleStmt, getPullRequestRole, id)
	var i PullrequestRole
	err := row.Scan(
		&i.ID,
		&i.RepositoryID,
		&i.RoleType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPullRequestRoles = `-- name: GetPullRequestRoles :many
select id, repository_id, role_type, description, created_at, updated_at from pullrequest_role where repository_id = $1 order by id asc
`

func (q *Queries) GetPullRequestRoles(ctx context.Context, repositoryID int64) ([]PullrequestRole, error) {
	rows, err := q.query(ctx, q.getPullRequestRolesStmt, getPullRequestRoles, repositoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PullrequestRole
	for rows.Next() {
		var i PullrequestRole
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryID,
			&i.RoleType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePullRequest = `-- name: UpdatePullRequest :exec
update pullrequest set action = $1, status = $2, url = $3, title = $4, updated_at = $5, closed_at = $6, additions = $7, deletions = $8, changed_files = $9, commits = $10
where number = $11 and repository_id = $12
`

type UpdatePullRequestParams struct {
	Action       string       `json:"action"`
	Status       string       `json:"status"`
	Url          string       `json:"url"`
	Title        string       `json:"title"`
	UpdatedAt    time.Time    `json:"updated_at"`
	ClosedAt     sql.NullTime `json:"closed_at"`
	Additions    int32        `json:"additions"`
	Deletions    int32        `json:"deletions"`
	ChangedFiles int32        `json:"changed_files"`
	Commits      int32        `json:"commits"`
	Number       int64        `json:"number"`
	RepositoryID int64        `json:"repository_id"`
}

func (q *Queries) UpdatePullRequest(ctx context.Context, arg UpdatePullRequestParams) error {
	_, err := q.exec(ctx, q.updatePullRequestStmt, updatePullRequest,
		arg.Action,
		arg.Status,
		arg.Url,
		arg.Title,
		arg.UpdatedAt,
		arg.ClosedAt,
		arg.Additions,
		arg.Deletions,
		arg.ChangedFiles,
		arg.Commits,
		arg.Number,
		arg.RepositoryID,
	)
	return err
}

const updatePullRequestRole = `-- name: UpdatePullRequestRole :exec
update pullrequest_role set role_type = $1, description = $2, updated_at = $3 where id = $4
`

type UpdatePullRequestRoleParams struct {
	RoleType    string    `json:"role_type"`
	Description string    `json:"description"`
	UpdatedAt   time.Time `json:"updated_at"`
	ID          int64     `json:"id"`
}

func (q *Queries) UpdatePullRequestRole(ctx context.Context, arg UpdatePullRequestRoleParams) error {
	_, err := q.exec(ctx, q.updatePullRequestRoleStmt, updatePullRequestRole,
		arg.RoleType,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
