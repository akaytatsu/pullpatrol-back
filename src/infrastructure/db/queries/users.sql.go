// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const checkUserByEmail = `-- name: CheckUserByEmail :one
select count(*) from users where email = $1
`

func (q *Queries) CheckUserByEmail(ctx context.Context, email string) (int64, error) {
	row := q.queryRow(ctx, q.checkUserByEmailStmt, checkUserByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkUserByID = `-- name: CheckUserByID :one
select count(*) from users where id = $1
`

func (q *Queries) CheckUserByID(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.checkUserByIDStmt, checkUserByID, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
insert into users(name, email, password, is_admin, updated_at) values ($1, $2, $3, $4, $5) RETURNING id, name, email, password, is_admin, git_name, created_at, updated_at
`

type CreateUserParams struct {
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	IsAdmin   bool      `json:"is_admin"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsAdmin,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.GitName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, is_admin, git_name, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.GitName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, is_admin, git_name, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.GitName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, email, password, is_admin, git_name, created_at, updated_at from users order by id asc
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsAdmin,
			&i.GitName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update users set name = $1, email = $2, is_admin = $3, git_name = $4, updated_at = $5 where id = $6 RETURNING id, name, email, password, is_admin, git_name, created_at, updated_at
`

type UpdateUserParams struct {
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	IsAdmin   bool           `json:"is_admin"`
	GitName   sql.NullString `json:"git_name"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Name,
		arg.Email,
		arg.IsAdmin,
		arg.GitName,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.GitName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
