// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkPullRequestExistsStmt, err = db.PrepareContext(ctx, checkPullRequestExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckPullRequestExists: %w", err)
	}
	if q.checkRepositoryExistsStmt, err = db.PrepareContext(ctx, checkRepositoryExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckRepositoryExists: %w", err)
	}
	if q.checkUserByEmailStmt, err = db.PrepareContext(ctx, checkUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUserByEmail: %w", err)
	}
	if q.checkUserByIDStmt, err = db.PrepareContext(ctx, checkUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUserByID: %w", err)
	}
	if q.createGroupStmt, err = db.PrepareContext(ctx, createGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createPullRequestStmt, err = db.PrepareContext(ctx, createPullRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePullRequest: %w", err)
	}
	if q.createRepositoryStmt, err = db.PrepareContext(ctx, createRepository); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepository: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deleteRepositoryStmt, err = db.PrepareContext(ctx, deleteRepository); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRepository: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getGroupStmt, err = db.PrepareContext(ctx, getGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroup: %w", err)
	}
	if q.getGroupsStmt, err = db.PrepareContext(ctx, getGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroups: %w", err)
	}
	if q.getPullRequestStmt, err = db.PrepareContext(ctx, getPullRequest); err != nil {
		return nil, fmt.Errorf("error preparing query GetPullRequest: %w", err)
	}
	if q.getRepositoriesStmt, err = db.PrepareContext(ctx, getRepositories); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepositories: %w", err)
	}
	if q.getRepositoryByIDStmt, err = db.PrepareContext(ctx, getRepositoryByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepositoryByID: %w", err)
	}
	if q.getRepositoryByRepositoryStmt, err = db.PrepareContext(ctx, getRepositoryByRepository); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepositoryByRepository: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.getUsersByGroupStmt, err = db.PrepareContext(ctx, getUsersByGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByGroup: %w", err)
	}
	if q.updateGroupStmt, err = db.PrepareContext(ctx, updateGroup); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroup: %w", err)
	}
	if q.updatePullRequestStmt, err = db.PrepareContext(ctx, updatePullRequest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePullRequest: %w", err)
	}
	if q.updateRepositoryStmt, err = db.PrepareContext(ctx, updateRepository); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRepository: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkPullRequestExistsStmt != nil {
		if cerr := q.checkPullRequestExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkPullRequestExistsStmt: %w", cerr)
		}
	}
	if q.checkRepositoryExistsStmt != nil {
		if cerr := q.checkRepositoryExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkRepositoryExistsStmt: %w", cerr)
		}
	}
	if q.checkUserByEmailStmt != nil {
		if cerr := q.checkUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUserByEmailStmt: %w", cerr)
		}
	}
	if q.checkUserByIDStmt != nil {
		if cerr := q.checkUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUserByIDStmt: %w", cerr)
		}
	}
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createPullRequestStmt != nil {
		if cerr := q.createPullRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPullRequestStmt: %w", cerr)
		}
	}
	if q.createRepositoryStmt != nil {
		if cerr := q.createRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepositoryStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deleteRepositoryStmt != nil {
		if cerr := q.deleteRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRepositoryStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getGroupStmt != nil {
		if cerr := q.getGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupStmt: %w", cerr)
		}
	}
	if q.getGroupsStmt != nil {
		if cerr := q.getGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupsStmt: %w", cerr)
		}
	}
	if q.getPullRequestStmt != nil {
		if cerr := q.getPullRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPullRequestStmt: %w", cerr)
		}
	}
	if q.getRepositoriesStmt != nil {
		if cerr := q.getRepositoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoriesStmt: %w", cerr)
		}
	}
	if q.getRepositoryByIDStmt != nil {
		if cerr := q.getRepositoryByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoryByIDStmt: %w", cerr)
		}
	}
	if q.getRepositoryByRepositoryStmt != nil {
		if cerr := q.getRepositoryByRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepositoryByRepositoryStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.getUsersByGroupStmt != nil {
		if cerr := q.getUsersByGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByGroupStmt: %w", cerr)
		}
	}
	if q.updateGroupStmt != nil {
		if cerr := q.updateGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupStmt: %w", cerr)
		}
	}
	if q.updatePullRequestStmt != nil {
		if cerr := q.updatePullRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePullRequestStmt: %w", cerr)
		}
	}
	if q.updateRepositoryStmt != nil {
		if cerr := q.updateRepositoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRepositoryStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	checkPullRequestExistsStmt    *sql.Stmt
	checkRepositoryExistsStmt     *sql.Stmt
	checkUserByEmailStmt          *sql.Stmt
	checkUserByIDStmt             *sql.Stmt
	createGroupStmt               *sql.Stmt
	createPullRequestStmt         *sql.Stmt
	createRepositoryStmt          *sql.Stmt
	createUserStmt                *sql.Stmt
	deleteGroupStmt               *sql.Stmt
	deleteRepositoryStmt          *sql.Stmt
	deleteUserStmt                *sql.Stmt
	getGroupStmt                  *sql.Stmt
	getGroupsStmt                 *sql.Stmt
	getPullRequestStmt            *sql.Stmt
	getRepositoriesStmt           *sql.Stmt
	getRepositoryByIDStmt         *sql.Stmt
	getRepositoryByRepositoryStmt *sql.Stmt
	getUserStmt                   *sql.Stmt
	getUserByEmailStmt            *sql.Stmt
	getUsersStmt                  *sql.Stmt
	getUsersByGroupStmt           *sql.Stmt
	updateGroupStmt               *sql.Stmt
	updatePullRequestStmt         *sql.Stmt
	updateRepositoryStmt          *sql.Stmt
	updateUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		checkPullRequestExistsStmt:    q.checkPullRequestExistsStmt,
		checkRepositoryExistsStmt:     q.checkRepositoryExistsStmt,
		checkUserByEmailStmt:          q.checkUserByEmailStmt,
		checkUserByIDStmt:             q.checkUserByIDStmt,
		createGroupStmt:               q.createGroupStmt,
		createPullRequestStmt:         q.createPullRequestStmt,
		createRepositoryStmt:          q.createRepositoryStmt,
		createUserStmt:                q.createUserStmt,
		deleteGroupStmt:               q.deleteGroupStmt,
		deleteRepositoryStmt:          q.deleteRepositoryStmt,
		deleteUserStmt:                q.deleteUserStmt,
		getGroupStmt:                  q.getGroupStmt,
		getGroupsStmt:                 q.getGroupsStmt,
		getPullRequestStmt:            q.getPullRequestStmt,
		getRepositoriesStmt:           q.getRepositoriesStmt,
		getRepositoryByIDStmt:         q.getRepositoryByIDStmt,
		getRepositoryByRepositoryStmt: q.getRepositoryByRepositoryStmt,
		getUserStmt:                   q.getUserStmt,
		getUserByEmailStmt:            q.getUserByEmailStmt,
		getUsersStmt:                  q.getUsersStmt,
		getUsersByGroupStmt:           q.getUsersByGroupStmt,
		updateGroupStmt:               q.updateGroupStmt,
		updatePullRequestStmt:         q.updatePullRequestStmt,
		updateRepositoryStmt:          q.updateRepositoryStmt,
		updateUserStmt:                q.updateUserStmt,
	}
}
