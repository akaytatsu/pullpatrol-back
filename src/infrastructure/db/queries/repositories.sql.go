// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: repositories.sql

package queries

import (
	"context"
	"time"
)

const checkRepositoryExists = `-- name: CheckRepositoryExists :one
select count(*) from repositories where repository = $1
`

func (q *Queries) CheckRepositoryExists(ctx context.Context, repository string) (int64, error) {
	row := q.queryRow(ctx, q.checkRepositoryExistsStmt, checkRepositoryExists, repository)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRepository = `-- name: CreateRepository :one
insert into repositories (repository, active, updated_at) values ($1, $2, $3) RETURNING id, repository, active, created_at, updated_at
`

type CreateRepositoryParams struct {
	Repository string    `json:"repository"`
	Active     bool      `json:"active"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) (Repository, error) {
	row := q.queryRow(ctx, q.createRepositoryStmt, createRepository, arg.Repository, arg.Active, arg.UpdatedAt)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRepository = `-- name: DeleteRepository :exec
delete from repositories where id = $1
`

func (q *Queries) DeleteRepository(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteRepositoryStmt, deleteRepository, id)
	return err
}

const getRepositories = `-- name: GetRepositories :many
select id, repository, active, created_at, updated_at from repositories order by id asc
`

func (q *Queries) GetRepositories(ctx context.Context) ([]Repository, error) {
	rows, err := q.query(ctx, q.getRepositoriesStmt, getRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Repository,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepositoryByID = `-- name: GetRepositoryByID :one
select id, repository, active, created_at, updated_at from repositories where id = $1
`

func (q *Queries) GetRepositoryByID(ctx context.Context, id int64) (Repository, error) {
	row := q.queryRow(ctx, q.getRepositoryByIDStmt, getRepositoryByID, id)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepositoryByRepository = `-- name: GetRepositoryByRepository :one
select id, repository, active, created_at, updated_at from repositories where repository = $1
`

func (q *Queries) GetRepositoryByRepository(ctx context.Context, repository string) (Repository, error) {
	row := q.queryRow(ctx, q.getRepositoryByRepositoryStmt, getRepositoryByRepository, repository)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRepository = `-- name: UpdateRepository :one
update repositories set repository = $1, active = $2, updated_at = $3 where id = $4 RETURNING id, repository, active, created_at, updated_at
`

type UpdateRepositoryParams struct {
	Repository string    `json:"repository"`
	Active     bool      `json:"active"`
	UpdatedAt  time.Time `json:"updated_at"`
	ID         int64     `json:"id"`
}

func (q *Queries) UpdateRepository(ctx context.Context, arg UpdateRepositoryParams) (Repository, error) {
	row := q.queryRow(ctx, q.updateRepositoryStmt, updateRepository,
		arg.Repository,
		arg.Active,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Repository,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
