// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/repository (interfaces: IRepositoryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryRepository is a mock of IRepositoryRepository interface.
type MockIRepositoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryRepositoryMockRecorder
}

// MockIRepositoryRepositoryMockRecorder is the mock recorder for MockIRepositoryRepository.
type MockIRepositoryRepositoryMockRecorder struct {
	mock *MockIRepositoryRepository
}

// NewMockIRepositoryRepository creates a new mock instance.
func NewMockIRepositoryRepository(ctrl *gomock.Controller) *MockIRepositoryRepository {
	mock := &MockIRepositoryRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryRepository) EXPECT() *MockIRepositoryRepositoryMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockIRepositoryRepository) CreateRepository(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockIRepositoryRepositoryMockRecorder) CreateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockIRepositoryRepository)(nil).CreateRepository), arg0)
}

// DeleteRepository mocks base method.
func (m *MockIRepositoryRepository) DeleteRepository(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockIRepositoryRepositoryMockRecorder) DeleteRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockIRepositoryRepository)(nil).DeleteRepository), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryRepository) GetByID(arg0 string) (*entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryRepository)(nil).GetByID), arg0)
}

// GetByName mocks base method.
func (m *MockIRepositoryRepository) GetByName(arg0 string) (*entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIRepositoryRepositoryMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIRepositoryRepository)(nil).GetByName), arg0)
}

// UpdateRepository mocks base method.
func (m *MockIRepositoryRepository) UpdateRepository(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockIRepositoryRepositoryMockRecorder) UpdateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockIRepositoryRepository)(nil).UpdateRepository), arg0)
}
