// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/repository (interfaces: IRepositoryRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryRepository is a mock of IRepositoryRepository interface.
type MockIRepositoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryRepositoryMockRecorder
}

// MockIRepositoryRepositoryMockRecorder is the mock recorder for MockIRepositoryRepository.
type MockIRepositoryRepositoryMockRecorder struct {
	mock *MockIRepositoryRepository
}

// NewMockIRepositoryRepository creates a new mock instance.
func NewMockIRepositoryRepository(ctrl *gomock.Controller) *MockIRepositoryRepository {
	mock := &MockIRepositoryRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryRepository) EXPECT() *MockIRepositoryRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdatePullRequest mocks base method.
func (m *MockIRepositoryRepository) CreateOrUpdatePullRequest(arg0 *entity.EntityPullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePullRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdatePullRequest indicates an expected call of CreateOrUpdatePullRequest.
func (mr *MockIRepositoryRepositoryMockRecorder) CreateOrUpdatePullRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePullRequest", reflect.TypeOf((*MockIRepositoryRepository)(nil).CreateOrUpdatePullRequest), arg0)
}

// CreateOrUpdateRepository mocks base method.
func (m *MockIRepositoryRepository) CreateOrUpdateRepository(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateRepository indicates an expected call of CreateOrUpdateRepository.
func (mr *MockIRepositoryRepositoryMockRecorder) CreateOrUpdateRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepository", reflect.TypeOf((*MockIRepositoryRepository)(nil).CreateOrUpdateRepository), arg0)
}

// DeleteRepository mocks base method.
func (m *MockIRepositoryRepository) DeleteRepository(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockIRepositoryRepositoryMockRecorder) DeleteRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockIRepositoryRepository)(nil).DeleteRepository), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryRepository) GetByID(arg0 int) (*entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryRepository)(nil).GetByID), arg0)
}

// GetByRepo mocks base method.
func (m *MockIRepositoryRepository) GetByRepo(arg0 string) (*entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRepo", arg0)
	ret0, _ := ret[0].(*entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRepo indicates an expected call of GetByRepo.
func (mr *MockIRepositoryRepositoryMockRecorder) GetByRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRepo", reflect.TypeOf((*MockIRepositoryRepository)(nil).GetByRepo), arg0)
}

// GetRepositories mocks base method.
func (m *MockIRepositoryRepository) GetRepositories() ([]entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories")
	ret0, _ := ret[0].([]entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockIRepositoryRepositoryMockRecorder) GetRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockIRepositoryRepository)(nil).GetRepositories))
}
