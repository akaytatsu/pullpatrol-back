// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/repository (interfaces: IUsecaseRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	git "app/infrastructure/git"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecaseRepository is a mock of IUsecaseRepository interface.
type MockIUsecaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseRepositoryMockRecorder
}

// MockIUsecaseRepositoryMockRecorder is the mock recorder for MockIUsecaseRepository.
type MockIUsecaseRepositoryMockRecorder struct {
	mock *MockIUsecaseRepository
}

// NewMockIUsecaseRepository creates a new mock instance.
func NewMockIUsecaseRepository(ctrl *gomock.Controller) *MockIUsecaseRepository {
	mock := &MockIUsecaseRepository{ctrl: ctrl}
	mock.recorder = &MockIUsecaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecaseRepository) EXPECT() *MockIUsecaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUsecaseRepository) Create(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUsecaseRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUsecaseRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIUsecaseRepository) Delete(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUsecaseRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUsecaseRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockIUsecaseRepository) Get(arg0 int) (*entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUsecaseRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUsecaseRepository)(nil).Get), arg0)
}

// GetRepositories mocks base method.
func (m *MockIUsecaseRepository) GetRepositories() ([]entity.EntityRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories")
	ret0, _ := ret[0].([]entity.EntityRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockIUsecaseRepositoryMockRecorder) GetRepositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockIUsecaseRepository)(nil).GetRepositories))
}

// ProccessPullRequest mocks base method.
func (m *MockIUsecaseRepository) ProccessPullRequest(arg0 git.GitInterface, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProccessPullRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProccessPullRequest indicates an expected call of ProccessPullRequest.
func (mr *MockIUsecaseRepositoryMockRecorder) ProccessPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessPullRequest", reflect.TypeOf((*MockIUsecaseRepository)(nil).ProccessPullRequest), arg0, arg1)
}

// Update mocks base method.
func (m *MockIUsecaseRepository) Update(arg0 *entity.EntityRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUsecaseRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUsecaseRepository)(nil).Update), arg0)
}
