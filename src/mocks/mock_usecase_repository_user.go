// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecase/user (interfaces: IRepositoryUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "app/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepositoryUser is a mock of IRepositoryUser interface.
type MockIRepositoryUser struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryUserMockRecorder
}

// MockIRepositoryUserMockRecorder is the mock recorder for MockIRepositoryUser.
type MockIRepositoryUserMockRecorder struct {
	mock *MockIRepositoryUser
}

// NewMockIRepositoryUser creates a new mock instance.
func NewMockIRepositoryUser(ctrl *gomock.Controller) *MockIRepositoryUser {
	mock := &MockIRepositoryUser{ctrl: ctrl}
	mock.recorder = &MockIRepositoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepositoryUser) EXPECT() *MockIRepositoryUserMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockIRepositoryUser) AddUserToGroup(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockIRepositoryUserMockRecorder) AddUserToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).AddUserToGroup), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockIRepositoryUser) CreateGroup(arg0 *entity.EntityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockIRepositoryUserMockRecorder) CreateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).CreateGroup), arg0)
}

// CreateUser mocks base method.
func (m *MockIRepositoryUser) CreateUser(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIRepositoryUserMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIRepositoryUser)(nil).CreateUser), arg0)
}

// DeleteGroup mocks base method.
func (m *MockIRepositoryUser) DeleteGroup(arg0 *entity.EntityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockIRepositoryUserMockRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).DeleteGroup), arg0)
}

// DeleteUser mocks base method.
func (m *MockIRepositoryUser) DeleteUser(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIRepositoryUserMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIRepositoryUser)(nil).DeleteUser), arg0)
}

// GetByID mocks base method.
func (m *MockIRepositoryUser) GetByID(arg0 int) (*entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryUserMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepositoryUser)(nil).GetByID), arg0)
}

// GetByMail mocks base method.
func (m *MockIRepositoryUser) GetByMail(arg0 string) (*entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMail", arg0)
	ret0, _ := ret[0].(*entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMail indicates an expected call of GetByMail.
func (mr *MockIRepositoryUserMockRecorder) GetByMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMail", reflect.TypeOf((*MockIRepositoryUser)(nil).GetByMail), arg0)
}

// GetGroup mocks base method.
func (m *MockIRepositoryUser) GetGroup(arg0 int) (*entity.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*entity.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockIRepositoryUserMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).GetGroup), arg0)
}

// GetGroups mocks base method.
func (m *MockIRepositoryUser) GetGroups() ([]entity.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].([]entity.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIRepositoryUserMockRecorder) GetGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIRepositoryUser)(nil).GetGroups))
}

// GetUser mocks base method.
func (m *MockIRepositoryUser) GetUser(arg0 int) (*entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIRepositoryUserMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIRepositoryUser)(nil).GetUser), arg0)
}

// GetUsers mocks base method.
func (m *MockIRepositoryUser) GetUsers() ([]entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIRepositoryUserMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIRepositoryUser)(nil).GetUsers))
}

// GetUsersByGroup mocks base method.
func (m *MockIRepositoryUser) GetUsersByGroup(arg0 int) ([]entity.EntityUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByGroup", arg0)
	ret0, _ := ret[0].([]entity.EntityUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByGroup indicates an expected call of GetUsersByGroup.
func (mr *MockIRepositoryUserMockRecorder) GetUsersByGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).GetUsersByGroup), arg0)
}

// RemoveUserFromGroup mocks base method.
func (m *MockIRepositoryUser) RemoveUserFromGroup(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromGroup indicates an expected call of RemoveUserFromGroup.
func (mr *MockIRepositoryUserMockRecorder) RemoveUserFromGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).RemoveUserFromGroup), arg0, arg1)
}

// UpdateGroup mocks base method.
func (m *MockIRepositoryUser) UpdateGroup(arg0 *entity.EntityGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockIRepositoryUserMockRecorder) UpdateGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockIRepositoryUser)(nil).UpdateGroup), arg0)
}

// UpdateUser mocks base method.
func (m *MockIRepositoryUser) UpdateUser(arg0 *entity.EntityUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIRepositoryUserMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIRepositoryUser)(nil).UpdateUser), arg0)
}
